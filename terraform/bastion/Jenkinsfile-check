library("tdr-jenkinslib")
def repo = "tdr-scripts"
def tooOld = "False"

pipeline {
  agent {
    label "master"
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are checking the age of")
  }
  stages {
    stage("Run git secrets") {
      steps {
        script {
          tdr.runGitSecrets(repo)
        }
      }
    }
    stage('Destroy bastion if the instance is older than 1 day') {
      agent {
        ecs {
          inheritFrom 'aws'
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsRunEC2DescribeInstances${params.STAGE.capitalize()}"
        }
      }
      stages {
        stage('Run delete user script') {
          steps {
            script {
              def accountNumber = tdr.getAccountNumberFromStage(params.STAGE)
              tooOld = sh(script: "python3 /check_ec2_instance_age.py ${accountNumber} ${params.STAGE} bastion-ec2-instance-${params.STAGE} 1", returnStdout: true).trim()
              if(tooOld == "True") {
                build(
                    job: "TDR Bastion Deploy",
                    parameters: [
                        string(name: "STAGE", value: params.STAGE),
                        string(name: "COMMAND", value: "destroy")
                    ],
                    wait: false)
              }
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        tdr.postToDaTdrSlackChannel(colour: "danger",
            message: "*Bastion delete script* :warning: The script to delete the bastion on ${params.STAGE} has failed"
        )
      }
    }
    success {
      script {
        if(tooOld == "True") {
          tdr.postToDaTdrSlackChannel(colour: "good",
              message: "*Bastion delete script* The bastion for ${params.STAGE} has been deleted"
          )
        }
      }
    }
  }
}

